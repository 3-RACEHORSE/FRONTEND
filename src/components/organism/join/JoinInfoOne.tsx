"use client";

import React, { useState, useEffect, ChangeEvent } from "react";
import InputWithButtonOne from "../../molecules/InputWithButtonOne";
import Text from "../../atoms/Text/InfoText";
import AuthWithText from "@/components/molecules/AuthWithText";
import WatchList from "@/components/molecules/WatchList";
import watchListData from "@/constants/watchListData";
import SendBtn from "@/components/atoms/button/SendBtn";
import SendBtnInValid from "@/components/atoms/button/SendBtnInValid";

interface DataFetcherProps {
  email: string;
  name: string;
  snsType: string;
  snsId: string;
}
export default function DataFetcher({
  email,
  name,
  snsType,
  snsId,
}: DataFetcherProps) {
  const [inputValueOne, setInputValueOne] = useState<string>("");
  const [checkValid1, setCheckValid1] = useState<boolean>(false);

  const [inputValueTwo, setInputValueTwo] = useState<string>("");
  const [checkValid2, setCheckValid2] = useState<boolean>(false);

  const [apple, setApple] = useState<{ [index: number]: string }[]>([]);
  const [buttonStates, setButtonStates] = useState(watchListData);

  // Î°úÍ∑∏Ïù∏ Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨ api
  const handleLoginValid = async () => {
    try {
      const res = await fetch(
        `${process.env.NEXT_PUBLIC_REACT_APP_API_URL}/member-service/api/v1/non-authorization/users/login`,
        {
          method: "POST", // ÎòêÎäî "POST" Îì± ÌïÑÏöîÌïú Î©îÏÑúÎìúÎ°ú Î≥ÄÍ≤Ω
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            email: email,
            snsType: snsType,
            snsId: snsId,
          }),
        }
      );
      if (res.status === 200) {
        console.log("ÌöåÏõêÍ∞ÄÏûÖÎêú ÏÇ¨Îûå");
      }
    } catch (error) {
      console.error("API ÌÜµÏã† Ïò§Î•ò:", error);
      return false;
    }
  };

  useEffect(() => {
    handleLoginValid();
  }, []);

  // Ï†ÑÌôîÎ≤àÌò∏ Ï†ÑÏÜ° api
  const handleSendPhoneNum = async () => {
    console.log(inputValueOne);
    try {
      const res = await fetch(
        `${process.env.NEXT_PUBLIC_REACT_APP_API_URL}/member-service/api/v1/non-authorization/users/certify`,
        {
          method: "POST", // ÎòêÎäî "POST" Îì± ÌïÑÏöîÌïú Î©îÏÑúÎìúÎ°ú Î≥ÄÍ≤Ω
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            phoneNum: inputValueOne,
          }),
        }
      );

      if (res.status === 200) {
        console.log("Ï†ÑÌôî Ïù∏Ï¶ù ÏôÑÎ£å");
        setCheckValid1(!checkValid1);
      }
    } catch (error) {
      console.error("API ÌÜµÏã† Ïò§Î•ò:", error);
      return false;
    }
  };
  //Ïù∏Ï¶ùÎ≤àÌò∏ Ï†ÑÏÜ° api
  const handleSendVertifyNum = async () => {
    console.log(inputValueTwo);
    try {
      const res = await fetch(
        `${process.env.NEXT_PUBLIC_REACT_APP_API_URL}/member-service/api/v1/non-authorization/users/verify`,
        {
          method: "POST", // ÎòêÎäî "POST" Îì± ÌïÑÏöîÌïú Î©îÏÑúÎìúÎ°ú Î≥ÄÍ≤Ω
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            phoneNum: inputValueOne,
            verificationCode: inputValueTwo,
          }),
        }
      );

      if (res.status === 200) {
        console.log("ÏΩîÎìú Ïù∏Ï¶ù ÏôÑÎ£å");
        setCheckValid2(!checkValid2);
      }
    } catch (error) {
      console.error("API ÌÜµÏã† Ïò§Î•ò:", error);
      return false;
    }
  };
  //Í∞ÄÏûÖÌïòÍ∏∞
  const handleJoin = async () => {
    // Ïù¥ Î∂ÄÎ∂ÑÏóê API Ìò∏Ï∂ú Î°úÏßÅ
    console.log(snsId, snsType, email, name, inputValueOne, apple);
    try {
      const res = await fetch(
        `${process.env.NEXT_PUBLIC_REACT_APP_API_URL}/member-service/api/v1/non-authorization/users/signup`,
        {
          method: "POST", // ÎòêÎäî "POST" Îì± ÌïÑÏöîÌïú Î©îÏÑúÎìúÎ°ú Î≥ÄÍ≤Ω
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            snsId: snsId,
            snsType: snsType,
            email: email,
            name: name,
            phoneNum: inputValueOne,
            interestCategories: apple,
          }),
        }
      );

      if (res.status === 200) {
        console.log("ÌöåÏõêÍ∞ÄÏûÖ ÏôÑÎ£å");
      }
    } catch (error) {
      console.error("API ÌÜµÏã† Ïò§Î•ò:", error);
      return false;
    }
  };

  //ÌôúÏÑ±ÌôîÎêú Î≤ÑÌäº Ï≤¥ÌÅ¨ Î∞è ÏñëÏãùÏóê ÎßûÏ∂∞, Ï†ÅÏö©
  const handleToggle = (index: number) => {
    const updatedButtons = buttonStates.map((button, i) =>
      i === index ? { ...button, isActive: !button.isActive } : button
    );
    setButtonStates(updatedButtons);

    const activeButtons = updatedButtons.filter((button) => button.isActive);
    const formattedActiveButtons = activeButtons.reduce((acc, cur) => {
      acc[cur.index] = cur.label;
      return acc;
    }, {} as { [index: number]: string });
    setApple([formattedActiveButtons]);
  };

  //input Í∞í Ï∂îÏ†Å
  const handleChangeOne = (event: ChangeEvent<HTMLInputElement>) => {
    setInputValueOne(event.target.value);
  };

  const handleChangeTwo = (event: ChangeEvent<HTMLInputElement>) => {
    setInputValueTwo(event.target.value);
  };

  return (
    <>
      <div>
        <AuthWithText title="ÏïÑÏù¥Îîî(Ïù¥Î©îÏùº)" value={email} />
      </div>
      <div>
        <AuthWithText title="Ïù¥Î¶Ñ" value={name} />
      </div>
      <Text title="Ï†ÑÌôîÎ≤àÌò∏" />
      <div>
        <InputWithButtonOne
          value={inputValueOne}
          onChange={handleChangeOne}
          onClick={handleSendPhoneNum}
          buttonText="Ï†ÑÏÜ°"
        />
      </div>
      {checkValid1 && (
        <>
          <Text title="Ïù∏Ï¶ù" />
          <div>
            <InputWithButtonOne
              value={inputValueTwo}
              onChange={handleChangeTwo}
              onClick={handleSendVertifyNum}
              buttonText="Ï†ÑÏÜ°"
            />
          </div>
        </>
      )}

      {/* Í¥ÄÏã¨Î™©Î°ù */}
      <Text title="Í¥ÄÏã¨Î™©Î°ùÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöîüôå" />
      <WatchList buttons={buttonStates} onClick={handleToggle} />

      {Object.keys(apple[0] || {}).length !== 0 && checkValid2 ? (
        <SendBtn onClick={handleJoin} buttonText="Í∞ÄÏûÖÌïòÍ∏∞" />
      ) : (
        <SendBtnInValid buttonText="Í∞ÄÏûÖÌïòÍ∏∞" />
      )}
    </>
  );
}
